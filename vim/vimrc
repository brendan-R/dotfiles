" ----------------------------------------------------------------------
" | General Settings                                                   |
" ----------------------------------------------------------------------

" Use Vundle to manage the vim plugins
" https://github.com/gmarik/Vundle.vim

set nocompatible               " Don't make vim vi-compatibile
filetype off                   " Disable file type detection
                               " (required by Vundle)

" Set the runtime path to include Vundle
set runtimepath+=~/.vim/plugins/Vundle.vim

" Initialize Vundle and specify the path
" where the plugins should be installed
call vundle#begin('~/.vim/plugins')

    " Let Vundle manage Vundle (this is important!)
    Plugin 'gmarik/Vundle.vim'

    " Plugin 'altercation/vim-colors-solarized'
    Plugin 'jiangmiao/auto-pairs'
    Plugin 'bling/vim-airline'
    Plugin 'chriskempson/vim-tomorrow-theme'
    Plugin 'crusoexia/vim-monokai'
    Plugin 'pangloss/vim-javascript'
    Plugin 'crusoexia/vim-javascript-lib'
    Plugin 'ap/vim-css-color'
    Plugin 'chrisbra/unicode.vim'
    Plugin 'editorconfig/editorconfig-vim'
    Plugin 'godlygeek/tabular'
    Plugin 'mattn/emmet-vim'
    Plugin 'mattn/webapi-vim'
    Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'othree/html5.vim'
    Plugin 'plasticboy/vim-markdown'
    Plugin 'scrooloose/nerdtree'
    Plugin 'scrooloose/syntastic'
    " Plugin 'shougo/neocomplcache.vim'
    Plugin 'shutnik/jshint2.vim'
    Plugin 'tomtom/tcomment_vim'
    Plugin 'tpope/vim-commentary'
    Plugin 'tpope/vim-fugitive'
    Plugin 'tpope/vim-repeat'
    Plugin 'tpope/vim-surround'
    Plugin 'vim-scripts/xoria256.vim'

call vundle#end()

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

syntax on                      " Enable syntax highlighting

if has('autocmd')
    filetype plugin indent on
    "           │     │    └──── Enable file type detection
    "           │     └───────── Enable loading of indent file
    "           └─────────────── Enable loading of plugin files
endif

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
" These written by BR
"
" General wuss settings
behave mswin
" Made delete work with selections
smap <Del> <C-g>"_d
" Make copy work
smap <C-c> <C-g>y
" Make cut work
smap <C-x> <C-g>x
" Make paste work
imap <C-v> <Esc>pi<right>
smap <C-v> <C-g>p<right>
" Make tab work when shifted
smap <Tab> <C-g>1>
" Make reverse-tab work when shifted
smap <S-Tab> <C-g>1<
" Make reverse-tab work when shifted
imap <S-Tab> <Esc> 1< i
" Make control z undo (note, this can close a session unexpectedly - rather
" dangerous!)
imap <C-z> <Esc>:u<Enter>i
" Get re-do from insert mode
imap <C-r> <Esc><C-r><Enter>i

set mouse=a
set nu

" Make select all work
imap <C-a> <C-Home><C-S-End>
" map <C-n> :enew
" map <C-o> :e . <Enter>

" New tab
imap <C-t> <Esc> :tabnew <Enter> i
" map <C-i> >>
" Close tab
imap <C-w> <Esc> :close <Enter> i
imap <C-q> <Esc>ZZ
" map <C-W> :q! <Enter>
imap <C-f> <Esc>/
" map <F3> n
" imap <C-h> :%s/

" Make vim split over lines when you break in parens
inoremap {<cr> {<cr>}<c-o>O<tab>
inoremap [<cr> [<cr>]<c-o>O<tab>
inoremap (<cr> (<cr>)<c-o>O<tab>


" If the current buffer has never been saved, it will have no name,
"1 call the file browser to save it, otherwise just save it.
" command -nargs=0 -bar Update if &modified
"   \|    if empty(bufname('%'))
"   \|        browse confirm write
"   \|    else
"   \|        confirm write
"   \|    endif
"   \|endif


nnoremap <silent> <C-S> :<C-u>Update<CR>

":inoremap <c-s>:Update<CR>

" This should mean that you spend more time in insert mode
" au BufRead,BufNewFile * start
startinsert

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
" These taken from original github repo

set t_Co=256                   " Enable full-color support

"if has('gui_running')          " ┐
    "colorscheme solarized      " │
"else                           " │ Use custom color scheme
    "colorscheme xoria256       " │
"endif                          " ┘

" colorscheme Tomorrow-Night-Bright
colorscheme monokai

set autoindent                 " Copy indent to the new line

"set background=dark            " Use colors that look good
                               " on a dark background

set backspace=indent           " ┐
set backspace+=eol             " │ Allow `backspace`
set backspace+=start           " ┘ in insert mode

set backupdir=~/.vim/backups   " Set directory for backup files

set backupskip=/tmp/*          " ┐ Don't create backups
set backupskip+=/private/tmp/* " ┘ for certain files

"set clipboard=unnamed          " ┐
                               " │ Use the system clipboard
" if has('unnamedplus')        " │ as the default register
set clipboard=unnamedplus      " │
" endi                         " ┘

set cpoptions+=$               " When making a change, don't
                               " redisplay the line, and instead,
                               " put a `$` sign at the end of
                               " the changed text

set textwidth=79               " Break lines at x chars
set colorcolumn=80             " Highlight certain column(s)
set cursorline                 " Highlight the current line
set directory=~/.vim/swaps     " Set directory for swap files
set encoding=utf-8 nobomb      " Use UTF-8 without BOM
set history=5000               " Increase command line history
set hlsearch                   " Enable search highlighting
set ignorecase                 " Ignore case in search patterns

set incsearch                  " Highlight search pattern as
                               " it is being typed

set laststatus=2               " Always show the status line

set listchars=tab:▸\           " ┐
set listchars+=trail:·         " │ Use custom symbols to
set listchars+=eol:↴           " │ represent invisible characters
set listchars+=nbsp:_          " ┘

set magic                      " Enable extended regexp
set mousehide                  " Hide mouse pointer while typing
set noerrorbells               " Disable error bells

set nojoinspaces               " When using the join command,
                               " only insert a single space
                               " after a `.`, `?`, or `!`

"set nostartofline             " Kept the cursor on the same column
set number                     " Show line number

set numberwidth=5              " Increase the minimal number of
                               " columns used for the `line number`

set report=0                   " Report the number of lines changed
set ruler                      " Show cursor position

set scrolloff=5                " When scrolling, keep the cursor
                               " 5 lines below the top and 5 lines
                               " above the bottom of the screen

set shortmess=aAItW            " Avoid all the hit-enter prompts
set showcmd                    " Show the command being typed
set showmode                   " Show current mode
set spelllang=en_us            " Set the spellchecking language

set smartcase                  " Override `ignorecase` option
                               " if the search pattern contains
                               " uppercase characters

set synmaxcol=2500             " Limit syntax highlighting (this
                               " avoids the very slow redrawing
                               " when files contain long lines)

set tabstop=2                  " ┐
set softtabstop=2              " │ Set global <TAB> settings
set shiftwidth=2               " │ http://vimcasts.org/e/2
set expandtab                  " ┘

set ttyfast                    " Enable fast terminal connection
set undodir=~/.vim/undos       " Set directory for undo files
set undofile                   " Automatically save undo history
" set virtualedit=al           " Allow cursor to be anywhere

set visualbell                 " ┐
set noerrorbells               " │ Disable beeping and window flashing
set t_vb=                      " ┘ https://vim.wikia.com/wiki/Disable_beeping

"set wildmenu                   " Enable enhanced command-line
                               " completion (by hitting <TAB> in
                               " command mode, Vim will show the
                               " possible matches just above the
                               " command line with the first
                               " match highlighted)

set winminheight=0             " Allow windows to be squashed
set t_ut=                      " This should remove background colour problems
                               " with tmux: http://superuser.com/a/562423


" ----------------------------------------------------------------------
" | Helper Functions                                                   |
" ----------------------------------------------------------------------

function! GetGitBranchName()

    let branchName = ""

    if exists('g:loaded_fugitive')
        let branchName = '[' . fugitive#head() . ']'
    endif

    return branchName

endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! StripTrailingWhitespaces()

    " Save last search and cursor position
    let searchHistory = @/
    let cursorLine = line('.')
    let cursorColumn = col('.')

    " Strip trailing whitespaces
    %s/\s\+$//e

    " Restore previous search history and cursor position
    let @/ = searchHistory
    call cursor(cursorLine, cursorColumn)

endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function! ToggleLimits()

    " [51,73]
    "   - git commit message
    "     http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html
    " [81]
    "   - general use

    if ( &colorcolumn == '73' )
        set colorcolumn+=51,81
    else
        set colorcolumn-=51,81
    endif

endfunction

" ----------------------------------------------------------------------
" | Automatic Commands                                                 |
" ----------------------------------------------------------------------

if has('autocmd')

    " Autocommand Groups
    " http://learnvimscriptthehardway.stevelosh.com/chapters/14.html

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Automatically reload the `~/.vimrc` and `~/.gvimrc`
    " files whenever their content is changed.

    augroup auto_reload_vim_configs
        autocmd!
        autocmd BufWritePost vimrc source $MYVIMRC
        if has('gui_running')
            autocmd BufWritePost gvimrc source $MYGVIMRC
        endif
    augroup END

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Automatically reload the configurations from the
    " `~/.vimrc` and `~/.gvimrc` files whenever they are changed

    augroup auto_reload_vim_configs
        autocmd!
        autocmd BufWritePost vimrc source $MYVIMRC
        if has('gui_running')
            autocmd BufWritePost gvimrc source $MYGVIMRC
        endif
    augroup END

    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    " Automatically strip the trailing whitespaces when files are saved

    augroup strip_trailing_whitespaces
        autocmd!
        autocmd BufWritePre * :call StripTrailingWhitespaces()
    augroup END

endif


" ----------------------------------------------------------------------
" | Key Mappings                                                       |
" ----------------------------------------------------------------------

" Use a different mapleader (default is '\')
let mapleader = ','

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" Redefine trigger key for Emmet
" http://docs.emmet.io/cheat-sheet/
let g:user_emmet_leader_key='<C-E>'

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,* ] Search and replace the word under the cursor
nmap <leader>* :%s/\<<C-r><C-w>\>//<Left>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cc] Toggle code comments
" https://github.com/tomtom/tcomment_vim
map <leader>cc :TComment<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cr] Calculate result
" http://vimcasts.org/e/56
nmap <leader>cr 0yt=A<C-r>=<C-r>"<CR><Esc>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,cs] Clear search
map <leader>cs <Esc>:noh<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,h ] JSHint the code
" https://github.com/Shutnik/jshint2.vim
nmap <leader>h :JSHint<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,l ] Toggle `set list`
nmap <leader>l :set list!<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ss] Strip trailing whitespace
nmap <leader>ss :call StripTrailingWhitespaces()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ti] Toggle indent
nmap <leader>ti <Plug>IndentGuidesToggle

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,tl] Toggle show limits
nmap <leader>tl :call ToggleLimits()<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,tn] Toggle NERDTree
map <leader>tn :NERDTreeToggle<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,ts] Toggle Syntastic
nmap <leader>ts :SyntasticToggleMode<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,v ] Make the opening of the `.vimrc` file easier
nmap <leader>v :vsp $MYVIMRC<CR>

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" [,W ] Sudo write
map <leader>W :w !sudo tee %<CR>


" ----------------------------------------------------------------------
" | Plugins                                                            |
" ----------------------------------------------------------------------

" Emmet

" Load custom Emmet snippets
" http://docs.emmet.io/customization/snippets/
let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.vim/snippets/emmet.json')), "\n"))

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" Indent Guides

" Set custom indent colors
" https://github.com/nathanaelkane/vim-indent-guides#setting-custom-indent-colors
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=13  guibg=#d33682
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=237 guibg=#073642

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" Markdown

" Disable Folding
" https://github.com/plasticboy/vim-markdown#disable-folding
let g:vim_markdown_folding_disabled=1

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" NeoComplCache

" Enable `neocomplcache` by default
" https://github.com/Shougo/neocomplcache.vim#installation
" let g:neocomplcache_enable_at_startup=1

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" Syntastic

" Inform Syntastic which checkers to use based on file types
" https://github.com/scrooloose/syntastic#3-faq
let g:syntastic_html_checkers = [ 'jshint', 'validator' ]
let g:syntastic_javascript_checkers = [ 'jscs', 'jshint' ]

" Disable syntax checking by default
let g:syntastic_mode_map = {
    \ 'active_filetypes': [],
    \ 'mode': 'passive',
    \ 'passive_filetypes': []
\}


" ----------------------------------------------------------------------
" | Status Line                                                        |
" ----------------------------------------------------------------------

" Trying out airline for a while
let g:airline_powerline_fonts = 1


" Terminal types:
"
"   1) term  (normal terminals, e.g.: vt100, xterm)
"   2) cterm (color terminals, e.g.: MS-DOS console, color-xterm)
"   3) gui   (GUIs)

highlight ColorColumn
    \ term=NONE
    \ cterm=NONE  ctermbg=237    ctermfg=NONE
    \ gui=NONE    guibg=#073642  guifg=NONE

highlight CursorLineNr
    \ term=bold
    \ cterm=bold  ctermbg=NONE   ctermfg=178
    \ gui=bold    guibg=#073642  guifg=Orange

highlight LineNr
    \ term=NONE
    \ cterm=NONE  ctermfg=241    ctermbg=NONE
    \ gui=NONE    guifg=#839497  guibg=#073642

highlight User1
    \ term=NONE
    \ cterm=NONE  ctermbg=237    ctermfg=Grey
    \ gui=NONE    guibg=#073642  guifg=#839496

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

set statusline=
set statusline+=%1*            " User1 highlight
set statusline+=\ [%n]         " Buffer number
set statusline+=\ %{GetGitBranchName()} " Git branch name
set statusline+=\ [%f]         " Path to the file
set statusline+=%m             " Modified flag
set statusline+=%r             " Readonly flag
set statusline+=%h             " Help file flag
set statusline+=%w             " Preview window flag
set statusline+=%y             " File type
set statusline+=[
set statusline+=%{&ff}         " File format
set statusline+=:
set statusline+=%{strlen(&fenc)?&fenc:'none'} " File encoding
set statusline+=]
set statusline+=%=             " Left/Right separator
set statusline+=%c             " File encoding
set statusline+=,
set statusline+=%l             " Current line number
set statusline+=/
set statusline+=%L             " Total number of lines
set statusline+=\ (%P)\        " Percent through file

" Example result:
"
"  [1] [master] [vim/vimrc][vim][unix:utf-8]            17,238/381 (59%)


" ----------------------------------------------------------------------
" | Local Settings                                                     |
" ----------------------------------------------------------------------

" Load local settings if they exist
if filereadable(glob('~/.vimrc.local'))
    source ~/.vimrc.local
endif
